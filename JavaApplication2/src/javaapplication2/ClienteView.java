package javaapplication2;

import java.awt.Color;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.JOptionPane;
import java.util.Date;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.InputMismatchException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Felipe Gai
 */
public final class ClienteView extends javax.swing.JFrame {
    //iniciando variáveis globais
    //Gerador chama a class tabela e dá um nome

    //..........................................
    //index é responsável por coletar o indice da tabela
    public static int index;

    //..................................................
    //modoDep é uma variável que coleta Strings para ativar e desativar botões com um switch case
    String modoDep;
    //BackGround pega o backGround da tabela
    //....................................................
    //.......................................
    //...................................
    String sex;
    String pessoa = " ";
    int IDcep = 0;
    int IDcid = 0;
    int IDcliente = 0;
    int err = 0;
    private String logadouro;
    private String bairro;
    private String cidade;
    private String uf;
    private static boolean CPFfalse = false;

    /**
     * Creates new form InterfaceGra
     */
    public ClienteView() {
        initComponents();
        modoDep = "inicial";
        ManipulaInterfaceDep();
        setFocusLostBehavior();
        jCidade.setEditable(false);
        jEstado.setEditable(false);
        jBairro.setEditable(false);
        jRua.setEditable(false);

        if (!BD.getConnection()) {
            JOptionPane.showMessageDialog(null, "Falha na conexão, o sistema será fechado");
            System.exit(0);

        }

        BD.setResultSet("SELECT * FROM cidade");
        ultimoCEP();

        BD.setResultSet("SELECT * FROM cliente");

        setLocationRelativeTo(null);
        

        //RelativeNull é para a tela ficar centralizada
        setLocationRelativeTo(null);
        //.............................................

        //Modo "Excluir" desativa a maioria dos botões
        modoDep = "Excluir";
        //..........................................

        //Chama a função do modoDep
        //.........................
    }

    public void LoadTable() {
        //Modelo recebe a criação de tabelas

        //..................................
        //Seta o conteúdo de modelo na tabela local
        //.........................................
        //Define as larguras de cada posição
        //..................................
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo_sexo = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jbCadastrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jbMasculino = new javax.swing.JRadioButton();
        jbFeminino = new javax.swing.JRadioButton();
        jbLimpar = new javax.swing.JButton();
        jCNPJ = new javax.swing.JFormattedTextField();
        jFone = new javax.swing.JFormattedTextField();
        jCelular = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jCEP = new javax.swing.JFormattedTextField();
        jBairro = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jbNovo = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jRua = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jbrFisica = new javax.swing.JRadioButton();
        jbrJuri = new javax.swing.JRadioButton();
        jCPF = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jOBS = new javax.swing.JTextArea();
        jDataNascimento = new javax.swing.JFormattedTextField();
        jbConsulta = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jCidade = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jEstado = new javax.swing.JFormattedTextField();
        jNumero = new javax.swing.JFormattedTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de clientes");
        setBackground(new java.awt.Color(208, 230, 227));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jNome.setToolTipText("");
        jNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNomeActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(211, 211, 211));
        jLabel1.setFont(new java.awt.Font("Quartz", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 255));
        jLabel1.setText("Cadastro de clientes");

        jbCadastrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication2/cadastro (1).png"))); // NOI18N
        jbCadastrar.setText("Cadastrar");
        jbCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCadastrarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("NOME");
        jLabel2.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("CPF");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("TELEFONE");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("DATA NASCIMENTO");

        grupo_sexo.add(jbMasculino);
        jbMasculino.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbMasculino.setText("Masculino");
        jbMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMasculinoActionPerformed(evt);
            }
        });

        grupo_sexo.add(jbFeminino);
        jbFeminino.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbFeminino.setText("Feminino");
        jbFeminino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFemininoActionPerformed(evt);
            }
        });

        jbLimpar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbLimpar.setText("Limpar campo");
        jbLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparActionPerformed(evt);
            }
        });

        try {
            jCNPJ.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jCNPJ.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCNPJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCNPJActionPerformed(evt);
            }
        });

        try {
            jFone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jFone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFoneActionPerformed(evt);
            }
        });

        try {
            jCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jCelular.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCelularActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("CELULAR");

        jEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEmailActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("CEP");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("E-MAIL");

        try {
            jCEP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jCEP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCEP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCEPActionPerformed(evt);
            }
        });

        jBairro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBairro.setToolTipText("");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("BAIRRO");
        jLabel10.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("NÚMERO");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("ESTADO");

        jbNovo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbEdit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbEdit.setText("Alterar");
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("RUA");

        jRua.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("CIDADE");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("SEXO");

        jLabel16.setText("CNPJ");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("TIPO DE PESSOA");

        buttonGroup1.add(jbrFisica);
        jbrFisica.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbrFisica.setText("Física");
        jbrFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbrFisicaActionPerformed(evt);
            }
        });

        buttonGroup1.add(jbrJuri);
        jbrJuri.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbrJuri.setText("Jurídica");
        jbrJuri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbrJuriActionPerformed(evt);
            }
        });

        try {
            jCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jCPF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCPFActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("OBSERVAÇÃO");

        jScrollPane3.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jOBS.setColumns(20);
        jOBS.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOBS.setRows(5);
        jScrollPane3.setViewportView(jOBS);

        try {
            jDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jDataNascimento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jDataNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDataNascimentoActionPerformed(evt);
            }
        });

        jbConsulta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbConsulta.setText("Consultar");
        jbConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConsultaActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jCidade.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCidadeActionPerformed(evt);
            }
        });

        jButton3.setText("BUSCAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        try {
            jEstado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UU")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jEstado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEstadoActionPerformed(evt);
            }
        });

        try {
            jNumero.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jNumero.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancelar)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFone, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRua, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jbrFisica)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbrJuri))
                                    .addComponent(jDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jbMasculino, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jbFeminino, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel12)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(35, 35, 35))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel14))
                                    .addComponent(jEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(jButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(46, 46, 46))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jbrFisica)
                                                    .addComponent(jbrJuri)))
                                            .addComponent(jLabel17))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel16)
                                                .addComponent(jCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(112, 112, 112)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jbMasculino)
                                            .addComponent(jbFeminino))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(jDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jFone, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir)
                    .addComponent(jbConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBairro, jCEP, jCelular, jEmail, jFone, jNome, jRua});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel5, jLabel6, jLabel9});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jbCadastrar, jbEdit, jbExcluir, jbLimpar, jbNovo});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNomeActionPerformed


    private void jbCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCadastrarActionPerformed
        String sql = "";
        int cepE = 0;

        isCPF(jCPF.getText().replaceAll("[.,-,/]", ""));
        if (CPFfalse == false) {
            JOptionPane.showMessageDialog(null, "CPF Invalido!");

        } else {
            if (pessoa.equals("F")) {
                validaCPF();
            } else {
                if (pessoa.equals("J")) {
                    validaCNPJ();
                } else {
                    JOptionPane.showMessageDialog(null, "Tipo de pessoa Inválido!");
                }
            }

            if (err == 0) {

                DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                LocalDate data = LocalDate.parse(jDataNascimento.getText(), formato);
                System.out.println(data);

                try {
                    sql = "SELECT * FROM cidade WHERE CEP='"
                            + jCEP.getText().replace("-", "") + "'";
                    BD.setResultSet(sql);
                    if (BD.resultSet.next()) {

                        jBairro.setText(BD.resultSet.getString("bairro"));
                        jEstado.setText(BD.resultSet.getString("Estado"));
                        jCidade.setText(BD.resultSet.getString("cidade"));
                        IDcep = BD.resultSet.getInt("IDcidade");
                        System.out.println(IDcep);
                        cepE = 1;
                    } else {

                        jCEP.requestFocus();
                        BD.setResultSet("SELECT * FROM cidade");
                    }
                } catch (Exception erro) {

                }

                if (cepE == 1) {

                } else {

                    sql = "INSERT INTO  cidade (CEP, Estado, Rua, bairro, cidade ) Values ('"
                            + jCEP.getText().replace("-", "") + "','"
                            + jEstado.getText() + "','"
                            + jRua.getText() + "','"
                            + jBairro.getText() + "','"
                            + jCidade.getText() + "')";
                    System.out.println(sql);
                    int inserecidade = BD.runSQL(sql);
                    if (inserecidade == 1) {
                        JOptionPane.showMessageDialog(null, "Inclusão realizada com sucesso!");
                        modoDep = "Cadastrar";
                        ManipulaInterfaceDep();
                    } else {
                        JOptionPane.showMessageDialog(null, "Problemas na Inclusão, verifique se "
                                + "você digitou os campos corretamente!");
                    }

                    try {

                        sql = "SELECT IDcidade FROM cidade ORDER by IDcidade DESC limit 1 ";
                        BD.setResultSet(sql);

                        if (BD.resultSet.next()) {
                            System.out.println("teste");
                            //BD.resultSet.next();

                            IDcep = BD.resultSet.getInt("IDcidade");
                            System.out.println(IDcep);
                        } else {
                            JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                            jCEP.requestFocus();

                        }
                    } catch (Exception erro) {

                    }

                }

                //sql = " SELECT * FROM cliente ";
                // BD.runSQL(sql);
                //System.out.println(sql);
                sql = " INSERT INTO cliente ( nome, CPF, CNPJ, Email , telefone, datanascimento, sexo, celular,  IDcidade ,numero, obs) Values ('"
                        + jNome.getText() + "','"
                        + jCPF.getText().replace(".", "").replace("-", "") + "','"
                        + jCNPJ.getText().replace(".", "").replace("/", "").replace("-", "") + "','"
                        + jEmail.getText() + "','"
                        + jFone.getText().replace("(", "").replace(")", "").replace("-", "") + "','"
                        + data + "','"
                        + sex + "','"
                        + jCelular.getText().replace("(", "").replace(")", "").replace("-", "") + "',"
                        + IDcep + ",'"
                        + jNumero.getText() + "','"
                        + jOBS.getText() + "')";

                System.out.println(sql);
                int inserecliente = BD.runSQL(sql);
                if (inserecliente == 1) {
                    JOptionPane.showMessageDialog(null, "Inclusão realizada com sucesso!");
                    modoDep = "Cadastrar";
                    ManipulaInterfaceDep();
                    System.out.println(sql);
                } else {
                    JOptionPane.showMessageDialog(null, "Problemas na Inclusão, verifique se "
                            + "você digitou os campos corretamente!");
                }
                BD.setResultSet("SELECT * FROM cliente");
            }
        }


    }//GEN-LAST:event_jbCadastrarActionPerformed


    private void jbLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparActionPerformed
        limpar();
        modoDep = "Excluir";
        ManipulaInterfaceDep();
    }//GEN-LAST:event_jbLimparActionPerformed

    private void jCNPJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCNPJActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCNPJActionPerformed

    private void jFoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFoneActionPerformed

    private void jCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCelularActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCelularActionPerformed

    private void jCEPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCEPActionPerformed

    }//GEN-LAST:event_jCEPActionPerformed

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        modoDep = "Novo";
        ManipulaInterfaceDep();
        limpar();
        jCPF.setEditable(true);
        jCNPJ.setEditable(false);
    }//GEN-LAST:event_jbNovoActionPerformed

    public void limpar() {
        int PERSIST = JFormattedTextField.PERSIST;
        jNome.setText("");
        jCNPJ.setText("");
        jFone.setText("");
        jDataNascimento.setText("");
        jCPF.setText("");

        jCelular.setText("");
        jEmail.setText("");
        jCEP.setText("");
        jEstado.setText("");
        jBairro.setText("");
        jNumero.setText("");
        jRua.setText("");
    }

    public void setFocusLostBehavior() {
        int PERSIST = JFormattedTextField.PERSIST;
        jCPF.setFocusLostBehavior(PERSIST);
        jDataNascimento.setFocusLostBehavior(PERSIST);
        jCNPJ.setFocusLostBehavior(PERSIST);
        jCelular.setFocusLostBehavior(PERSIST);
        jFone.setFocusLostBehavior(PERSIST);
        jCEP.setFocusLostBehavior(PERSIST);
    }
    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditActionPerformed

        if (pessoa.equals("F")) {
            try {
                atualizaCPF();
            } catch (SQLException ex) {
                Logger.getLogger(ClienteView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (pessoa.equals("J")) {
                atualizaCNPJ();
            } else {
                JOptionPane.showMessageDialog(null, " Erro ao atualizar os dados do cliente! ");
            }
        }

    }//GEN-LAST:event_jbEditActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        jbEdit.setEnabled(false);
        jbExcluir.setEnabled(false);

        limpar();
        if (pessoa.equals("F")) {
            excluiCPF();
        } else {
            if (pessoa.equals("J")) {
                excluiCNPJ();
            } else {
            }
        }

    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbrFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbrFisicaActionPerformed
        modoDep = "pessoaF";
        ManipulaInterfaceDep();
        pessoa = "F";
    }//GEN-LAST:event_jbrFisicaActionPerformed

    private void jbrJuriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbrJuriActionPerformed
        modoDep = "pessoaJ";
        ManipulaInterfaceDep();
        pessoa = "J";
    }//GEN-LAST:event_jbrJuriActionPerformed

    private void jCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCPFActionPerformed

    private void jbMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMasculinoActionPerformed
        sex = "M";
    }//GEN-LAST:event_jbMasculinoActionPerformed

    private void jbFemininoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFemininoActionPerformed
        sex = "F";
    }//GEN-LAST:event_jbFemininoActionPerformed

    private void jDataNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDataNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDataNascimentoActionPerformed

    private void jbConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConsultaActionPerformed
        if (pessoa.equals("F")) {
            modoDep = "Editando";
            ManipulaInterfaceDep();
            consultaCPF();
            jCPF.setEditable(false);
        } else {
            if (pessoa.equals("J")) {
                modoDep = "Editando";
                ManipulaInterfaceDep();
                consultaCNPJ();
                jCNPJ.setEditable(false);
            } else {
                JOptionPane.showMessageDialog(null, "Escolha o tipo de Pessoa");
            }
        }


    }//GEN-LAST:event_jbConsultaActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        modoDep = "Novo";
        ManipulaInterfaceDep();
        jCPF.setEditable(true);
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCidadeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        validaCEP(jCEP.getText());
        if (jCEP.getText().replaceAll("-", "").length() == 8) {
            validaCEP(jCEP.getText());
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jEmailActionPerformed

    private void jEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jEstadoActionPerformed

    public void ManipulaInterfaceDep() {
        switch (modoDep) {

            case "Novo" -> {
                jbCadastrar.setEnabled(true);
                jbLimpar.setEnabled(true);
                jbConsulta.setEnabled(true);
                jbNovo.setEnabled(false);
                jbExcluir.setEnabled(false);
                jbEdit.setEnabled(false);
            }

            case "Cadastrar" -> {
                jbCadastrar.setEnabled(false);
                jbLimpar.setEnabled(false);

                jbNovo.setEnabled(true);
                jbExcluir.setEnabled(false);
                jbEdit.setEnabled(true);

            }

            case "Editar" -> {
                jbCadastrar.setEnabled(false);
                jbLimpar.setEnabled(true);
                jbEdit.setEnabled(true);
                jbNovo.setEnabled(false);
                jbExcluir.setEnabled(false);
                jbCancelar.setEnabled(false);
                jbConsulta.setEnabled(true);

            }

            case "Editando" -> {
                jbCadastrar.setEnabled(false);
                jbLimpar.setEnabled(true);
                jbEdit.setEnabled(true);
                jbNovo.setEnabled(false);
                jbExcluir.setEnabled(true);
                jbCancelar.setEnabled(true);
                jbConsulta.setEnabled(false);

            }

            case "Excluir" -> {
                jbNovo.setEnabled(true);
                jbCadastrar.setEnabled(false);
                jbLimpar.setEnabled(false);

                jbExcluir.setEnabled(false);
                jbEdit.setEnabled(false);
            }

            case "pessoaF" -> {
                jCPF.setEnabled(true);
                jCNPJ.setEnabled(false);

            }

            case "pessoaJ" -> {
                jCPF.setEnabled(false);
                jCNPJ.setEnabled(true);

            }

            case "inicial" -> {
                jbCadastrar.setEnabled(true);
                jbLimpar.setEnabled(true);
                jCPF.setEnabled(true);
                jCNPJ.setEnabled(false);
                jbNovo.setEnabled(false);
                jbExcluir.setEnabled(false);
                jbEdit.setEnabled(false);

            }

            default ->
                JOptionPane.showMessageDialog(null, "Modo inválido");
        }
    }

    public static boolean isCPF(String CPF) {
        // considera-se erro CPF's formados por uma sequencia de numeros iguais

        if (CPF.equals("00000000000")
                || CPF.equals("11111111111")
                || CPF.equals("22222222222") || CPF.equals("33333333333")
                || CPF.equals("44444444444") || CPF.equals("55555555555")
                || CPF.equals("66666666666") || CPF.equals("77777777777")
                || CPF.equals("88888888888") || CPF.equals("99999999999")
                || (CPF.length() != 11)) {
            CPFfalse = false;

            return (false);
        }

        char dig10, dig11;
        int sm, i, r, num, peso;

        // "try" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i = 0; i < 9; i++) {
                // converte o i-esimo caractere do CPF em um numero:
                // por exemplo, transforma o caractere '0' no inteiro 0
                // (48 eh a posicao de '0' na tabela ASCII)
                num = (int) (CPF.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11)) {
                dig10 = '0';
            } else {
                dig10 = (char) (r + 48); // converte no respectivo caractere numerico
            }
            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for (i = 0; i < 10; i++) {
                num = (int) (CPF.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11)) {
                dig11 = '0';
            } else {
                dig11 = (char) (r + 48);
            }

            // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))) {
                CPFfalse = true;
                return (true);
            } else {
                CPFfalse = false;
                return (false);
            }
        } catch (InputMismatchException erro) {
            CPFfalse = false;
            return (false);
        }
    }

    public void validaCPF() {

        try {
            String sql = "SELECT CPF FROM cliente WHERE CPF='"
                    + jCPF.getText().replace(".", "").replace("-", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                JOptionPane.showMessageDialog(null, "Cliente já cadastrado!");
                err = 1;

            } else {

                err = 0;
            }
        } catch (Exception erro) {

        }
    }

    public void validaCNPJ() {
        try {
            String sql = "SELECT CNPJ FROM cliente WHERE CNPJ='"
                    + jCNPJ.getText().replace(".", "").replace("-", "").replace("/", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                JOptionPane.showMessageDialog(null, "Cliente já cadastrado!");
                err = 1;

            } else {

                err = 0;
            }
        } catch (Exception erro) {

        }
    }

    public void validaCEP(String cep) {

        String json;
        int error = 0;

        try {
            URL url = new URL("http://viacep.com.br/ws/" + cep + "/json");
            URLConnection urlConnection = url.openConnection();
            InputStream is = urlConnection.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));

            StringBuilder jsonSb = new StringBuilder();
            urlConnection.setConnectTimeout(50000);

            br.lines().forEach(l -> jsonSb.append(l.trim()));
            json = jsonSb.toString();

            // JOptionPane.showMessageDialog(null, json);
            json = json.replaceAll("[{},:]", "");
            json = json.replaceAll("\"", "\n");
            String array[] = new String[30];
            array = json.split("\n");

            JOptionPane.showMessageDialog(null, array);
            logadouro = array[7];
            bairro = array[15];
            cidade = array[19];
            uf = array[23];

            jRua.setText(logadouro);
            jBairro.setText(bairro);
            jCidade.setText(cidade);
            jEstado.setText(uf);
            //JOptionPane.showMessageDialog(null, logradouro + " " + bairro + " " + cidade + " " + uf);
            boolean TimeOut = urlConnection.getConnectTimeout() == HttpURLConnection.HTTP_OK;

        } catch (java.net.SocketTimeoutException e) {
            error = 1;

        } catch (java.io.IOException e) {
            error = 1;

        }

        try {
            if (error == 1) {
                String sql = "SELECT * FROM cidade WHERE CEP='"
                        + jCEP.getText().replace("-", "") + "'";
                BD.setResultSet(sql);
                if (BD.resultSet.next()) {

                    jBairro.setText(BD.resultSet.getString("bairro"));
                    jEstado.setText(BD.resultSet.getString("Estado"));
                    jCidade.setText(BD.resultSet.getString("cidade"));
                    IDcep = BD.resultSet.getInt("IDcidade");
                    System.out.println(IDcep);
                } else {
                    JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                    JOptionPane.showMessageDialog(null, "Digite os dados Manualmente!");
                    jCEP.requestFocus();
                    jCidade.setEditable(true);
                    jEstado.setEditable(true);
                    jBairro.setEditable(true);
                    jRua.setEditable(true);
                    BD.setResultSet("SELECT * FROM cidade");
                }

            }

        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "problema na conexção de dados!");

        }

    }

    public void excluiCPF() {

        String sql = "SELECT * FROM cliente WHERE CPF='"
                + jCPF.getText().replace(".", "").replace("-", "") + "'";
        BD.setResultSet(sql);
        String nom = "";
        try {
            BD.resultSet.next();
            nom = "Deletar o Cliente:" + BD.resultSet.getString("nome");
        } catch (SQLException ex1) {
            JOptionPane.showMessageDialog(null, "Cliente não cadastrado!");
            jCPF.requestFocus();
            BD.setResultSet("SELECT * FROM cliente");
            return;
        }
        int n = JOptionPane.showConfirmDialog(null, nom, "", JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            sql = "DELETE FROM cliente WHERE CPF='" + jCPF.getText().replace(".", "").replace("-", "") + "'";
            int r = BD.runSQL(sql);
            if (r == 1) {
                JOptionPane.showMessageDialog(null, "Exclusão realizada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possível excluir o Cliente !");

            }
        }
        BD.setResultSet("SELECT * FROM cliente");

    }

    private void excluiCNPJ() {

        String sql = "SELECT * FROM cliente WHERE CNPJ='"
                + jCNPJ.getText().replace(".", "").replace("-", "").replace("/", "") + "'";
        BD.setResultSet(sql);
        String nom = "";
        try {
            BD.resultSet.next();
            nom = "Deletar o Cliente:" + BD.resultSet.getString("nome");
        } catch (SQLException ex1) {
            JOptionPane.showMessageDialog(null, "Cliente não cadastrado!");
            jCPF.requestFocus();
            BD.setResultSet("SELECT * FROM cliente");
            return;
        }
        int n = JOptionPane.showConfirmDialog(null, nom, "", JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            sql = "DELETE FROM cliente WHERE CNPJ='" + jCNPJ.getText().replace(".", "").replace("-", "").replace("/", "") + "'";
            int r = BD.runSQL(sql);
            if (r == 1) {
                JOptionPane.showMessageDialog(null, "Exclusão realizada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possível excluir o Cliente !");

            }
        }
        BD.setResultSet("SELECT * FROM cliente");

    }

    public void ultimoCEP() {

        try {

            String sql = "SELECT IDcidade FROM cidade ORDER by IDcidade DESC limit 1 ";
            BD.setResultSet(sql);

            if (BD.resultSet.next()) {
                System.out.println("teste");
                //BD.resultSet.next();

                IDcep = BD.resultSet.getInt("IDcidade");
                System.out.println(IDcep);

            } else {
                JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                jCEP.requestFocus();
                BD.setResultSet("SELECT * FROM cidade");
            }
        } catch (Exception erro) {

        }
    }

    public void organizatabela() {

    }

    public void atualizaCamposCPF() throws ParseException {
        try {
            if (BD.resultSet.isAfterLast()) {
                BD.resultSet.last();
            }
            if (BD.resultSet.isBeforeFirst()) {
                BD.resultSet.first();
            }
            jNome.setText(BD.resultSet.getString("nome"));
            jEmail.setText(BD.resultSet.getString("Email"));

            String d = BD.resultSet.getString("datanascimento");
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date data = df.parse(d);
            SimpleDateFormat da = new SimpleDateFormat("dd-MM-yyyy");
            String datafinal = da.format(data).replace("-", "");
            System.out.println(datafinal);
            jDataNascimento.setText(datafinal);
            jFone.setText(BD.resultSet.getString("telefone"));
            jCelular.setText(BD.resultSet.getString("celular"));
            jNumero.setText(BD.resultSet.getString("numero"));
            sex = BD.resultSet.getString("sexo");
            System.out.println(sex);
            if (sex.equals("M")) {
                System.out.println(sex);
                sex = "M";
            } else {
                if (sex.equals("F")) {
                    System.out.println(sex);
                    sex = "F";

                }
            }
            BD.closeResultSet();

            String sql = "SELECT IDcidade FROM cliente WHERE CPF='"
                    + jCPF.getText().replace(".", "").replace("-", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                System.out.println("teste");
                //BD.resultSet.next();

                IDcid = BD.resultSet.getInt("IDcidade");
                System.out.println(IDcid);

            } else {
                JOptionPane.showMessageDialog(null, "CPF não encontrado!");
                jCEP.requestFocus();
                BD.setResultSet("SELECT * FROM cidade");
            }

            try {

                sql = "SELECT * FROM cidade WHERE IDcidade ='"
                        + IDcid + "'";
                BD.setResultSet(sql);
                if (BD.resultSet.next()) {

                    jBairro.setText(BD.resultSet.getString("bairro"));
                    jEstado.setText(BD.resultSet.getString("Estado"));
                    jCidade.setText(BD.resultSet.getString("cidade"));
                    jCEP.setText(BD.resultSet.getString("CEP"));
                    IDcep = BD.resultSet.getInt("IDcidade");
                    jRua.setText(BD.resultSet.getString("Rua"));
                    System.out.println(IDcep);
                } else {
                    JOptionPane.showMessageDialog(null, "CEP não encontrado!");
                    jCEP.requestFocus();
                    BD.setResultSet("SELECT * FROM cidade");
                }
            } catch (Exception erro) {

            }

        } catch (SQLException erro) {

        }
    }

    public void consultaCNPJ() {
        try {
            String sql = "SELECT * FROM cliente WHERE CNPJ='"
                    + jCNPJ.getText().replace(".", "").replace("-", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                atualizaCamposCNPJ();
                jNome.requestFocus();

            } else {
                JOptionPane.showMessageDialog(null, "Cliente não encontrado!");
                jCNPJ.requestFocus();
                modoDep = "Editar";
                ManipulaInterfaceDep();
                BD.setResultSet("SELECT * FROM cliente");
            }
        } catch (Exception erro) {

        }
    }

    public void consultaCPF() {
        try {
            String sql = "SELECT * FROM cliente WHERE CPF='"
                    + jCPF.getText().replace(".", "").replace("-", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                atualizaCamposCPF();
                jNome.requestFocus();

            } else {
                JOptionPane.showMessageDialog(null, "Cliente não encontrado!");
                jCPF.requestFocus();
                modoDep = "Editar";
                ManipulaInterfaceDep();
                BD.setResultSet("SELECT * FROM cliente");
            }
        } catch (Exception erro) {

        }
    }

    public void atualizaCPF() throws SQLException {
        String sql = "";
        try {
            sql = " SELECT IDcidade FROM cidade WHERE CEP ='"
                    + jCEP.getText().replace("-", "") + "'";
            BD.setResultSet(sql);
            IDcep = BD.resultSet.getInt("IDcidade");
            System.out.println(IDcep);

            sql = " SELECT IDcliente FROM cliente WHERE CPF ='"
                    + jCPF.getText().replace("-", "").replace(".", "") + "'";
            BD.setResultSet(sql);
            IDcliente = BD.resultSet.getInt("IDcliente");

        } catch (Exception erro) {
            System.out.println("deu ruim");
            System.out.println(IDcliente);
        }

        int cepE = 0;

        try {
            sql = "SELECT * FROM cidade WHERE CEP='"
                    + jCEP.getText().replace("-", "") + "'";
            BD.setResultSet(sql);
            if (BD.resultSet.next()) {

                jBairro.setText(BD.resultSet.getString("bairro"));
                jEstado.setText(BD.resultSet.getString("Estado"));
                jCidade.setText(BD.resultSet.getString("cidade"));
                IDcep = BD.resultSet.getInt("IDcidade");
                System.out.println(IDcep);
                cepE = 1;
            } else {
                JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                jCEP.requestFocus();
                BD.setResultSet("SELECT * FROM cidade");
            }
        } catch (Exception erro) {

        }

        if (cepE == 1) {

        } else {

            sql = "INSERT INTO  cidade (CEP, Estado, Rua, bairro, cidade ) Values ('"
                    + jCEP.getText().replace("-", "") + "','"
                    + jEstado.getText() + "','"
                    + jRua.getText() + "','"
                    + jBairro.getText() + "','"
                    + jCidade.getText() + "')";
            System.out.println(sql);
            int inserecidade = BD.runSQL(sql);
            if (inserecidade == 1) {
                JOptionPane.showMessageDialog(null, "Inclusão realizada com sucesso!");
                modoDep = "Cadastrar";
                ManipulaInterfaceDep();
            } else {
                JOptionPane.showMessageDialog(null, "Problemas na Inclusão, verifique se "
                        + "você digitou os campos corretamente!");
            }

            try {

                sql = "SELECT IDcidade FROM cidade ORDER by IDcidade DESC limit 1 ";
                BD.setResultSet(sql);

                if (BD.resultSet.next()) {
                    System.out.println("teste");
                    //BD.resultSet.next();

                    IDcep = BD.resultSet.getInt("IDcidade");
                    System.out.println(IDcep);
                } else {
                    JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                    jCEP.requestFocus();

                }
            } catch (Exception erro) {

            }

        }

        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate data = LocalDate.parse(jDataNascimento.getText(), formato);
        System.out.println(data);

        sql = "UPDATE cliente SET  "
                + "nome='" + jNome.getText() + "',"
                + "CNPJ='" + jCNPJ.getText().replace("-", "").replace(".", "").replace("/", "") + "',"
                + "Email='" + jEmail.getText() + "',"
                + "telefone ='" + jFone.getText().replace("(", "").replace(")", "").replace("-", "") + "',"
                + "datanascimento='" + data + "',"
                + "sexo='" + sex + "',"
                + "celular='" + jCelular.getText().replace("(", "").replace(")", "").replace("-", "") + "',"
                + "IDcidade=" + IDcep + ","
                + "numero='" + jNumero.getText() + "',"
                + "obs='" + jOBS.getText() + "'"
                + " WHERE CPF = '" + jCPF.getText().replace("-", "").replace(".", "") + "'";
        System.out.println(sql);

        int r2 = BD.runSQL(sql);
        if (r2 == 1) {
            JOptionPane.showMessageDialog(null, "Alteração realizada com sucesso!");

        } else {
            JOptionPane.showMessageDialog(null, "Problemas na Alteração, verifique se "
                    + "você digitou os campos corretamente!");
        }

    }

    public void atualizaCamposCNPJ() throws ParseException {
        try {
            if (BD.resultSet.isAfterLast()) {
                BD.resultSet.last();
            }
            if (BD.resultSet.isBeforeFirst()) {
                BD.resultSet.first();
            }
            jNome.setText(BD.resultSet.getString("nome"));
            jEmail.setText(BD.resultSet.getString("Email"));

            String d = BD.resultSet.getString("datanascimento");
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date data = df.parse(d);
            SimpleDateFormat da = new SimpleDateFormat("dd-MM-yyyy");
            String datafinal = da.format(data).replace("-", "");
            System.out.println(datafinal);
            jDataNascimento.setText(datafinal);
            jFone.setText(BD.resultSet.getString("telefone"));
            jCelular.setText(BD.resultSet.getString("celular"));
            jNumero.setText(BD.resultSet.getString("numero"));
            sex = BD.resultSet.getString("sexo");
            System.out.println(sex);
            if (sex.equals("M")) {
                System.out.println(sex);
                sex = "M";
            } else {
                if (sex.equals("F")) {
                    System.out.println(sex);
                    sex = "F";

                }
            }
            BD.closeResultSet();

            String sql = "SELECT IDcidade FROM cliente WHERE CNPJ='"
                    + jCNPJ.getText().replaceAll("[/,-,.]", "") + "'";
            BD.setResultSet(sql);
            System.out.println(sql);
            if (BD.resultSet.next()) {
                System.out.println("teste");
                //BD.resultSet.next();

                IDcid = BD.resultSet.getInt("IDcidade");
                System.out.println(IDcid);

            } else {
                JOptionPane.showMessageDialog(null, "CNPJ não encontrado!");
                jCEP.requestFocus();
                BD.setResultSet("SELECT * FROM cidade");
            }

            try {

                sql = "SELECT * FROM cidade WHERE IDcidade ='"
                        + IDcid + "'";
                BD.setResultSet(sql);
                if (BD.resultSet.next()) {

                    jBairro.setText(BD.resultSet.getString("bairro"));
                    jEstado.setText(BD.resultSet.getString("Estado"));
                    jCidade.setText(BD.resultSet.getString("cidade"));
                    jCEP.setText(BD.resultSet.getString("CEP"));
                    IDcep = BD.resultSet.getInt("IDcidade");
                    jRua.setText(BD.resultSet.getString("Rua"));
                    System.out.println(IDcep);
                } else {
                    JOptionPane.showMessageDialog(null, "CEP não encontrado!");
                    jCEP.requestFocus();
                    BD.setResultSet("SELECT * FROM cidade");
                }
            } catch (Exception erro) {

            }

        } catch (SQLException erro) {

        }
    }

    public void atualizaCNPJ() {
        String sql = "";
        try {
            sql = " SELECT IDcidade FROM cidade WHERE CEP ='"
                    + jCEP.getText().replace("-", "") + "'";
            BD.setResultSet(sql);
            IDcep = BD.resultSet.getInt("IDcidade");
            System.out.println(IDcep);

            sql = " SELECT IDcliente FROM cliente WHERE CNPJ ='"
                    + jCNPJ.getText().replaceAll("[/,-,.]", "") + "'";
            BD.setResultSet(sql);
            IDcliente = BD.resultSet.getInt("IDcliente");

        } catch (Exception erro) {
            System.out.println("deu ruim");
            System.out.println(IDcliente);
        }

        int cepE = 0;

        try {
            sql = "SELECT * FROM cidade WHERE CEP='"
                    + jCEP.getText().replace("-", "") + "'";
            BD.setResultSet(sql);
            if (BD.resultSet.next()) {

                jBairro.setText(BD.resultSet.getString("bairro"));
                jEstado.setText(BD.resultSet.getString("Estado"));
                jCidade.setText(BD.resultSet.getString("cidade"));
                IDcep = BD.resultSet.getInt("IDcidade");
                System.out.println(IDcep);
                cepE = 1;
            } else {
                JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                jCEP.requestFocus();
                BD.setResultSet("SELECT * FROM cidade");
            }
        } catch (Exception erro) {

        }

        if (cepE == 1) {

        } else {

            sql = "INSERT INTO  cidade (CEP, Estado, Rua, bairro, cidade ) Values ('"
                    + jCEP.getText().replace("-", "") + "','"
                    + jEstado.getText() + "','"
                    + jRua.getText() + "','"
                    + jBairro.getText() + "','"
                    + jCidade.getText() + "')";
            System.out.println(sql);
            int inserecidade = BD.runSQL(sql);
            if (inserecidade == 1) {
                JOptionPane.showMessageDialog(null, "Inclusão realizada com sucesso!");
                modoDep = "Cadastrar";
                ManipulaInterfaceDep();
            } else {
                JOptionPane.showMessageDialog(null, "Problemas na Inclusão, verifique se "
                        + "você digitou os campos corretamente!");
            }

            try {

                sql = "SELECT IDcidade FROM cidade ORDER by IDcidade DESC limit 1 ";
                BD.setResultSet(sql);

                if (BD.resultSet.next()) {
                    System.out.println("teste");
                    //BD.resultSet.next();

                    IDcep = BD.resultSet.getInt("IDcidade");
                    System.out.println(IDcep);
                } else {
                    JOptionPane.showMessageDialog(null, "Cep não encontrado!");
                    jCEP.requestFocus();

                }
            } catch (Exception erro) {

            }
        }

        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate data = LocalDate.parse(jDataNascimento.getText(), formato);
        System.out.println(data);

        sql = "UPDATE cliente SET  "
                + "nome='" + jNome.getText() + "',"
                + "CPF='" + jCPF.getText().replace("-", "").replace(".", "") + ","
                + "Email='" + jEmail.getText() + "',"
                + "telefone ='" + jFone.getText().replace("(", "").replace(")", "").replace("-", "") + "',"
                + "datanascimento='" + data + "',"
                + "sexo='" + sex + "',"
                + "celular='" + jCelular.getText().replace("(", "").replace(")", "").replace("-", "") + "',"
                + "IDcidade=" + IDcep + ","
                + "numero='" + jNumero.getText() + "',"
                + "obs='" + jOBS.getText() + "'"
                + " WHERE CNPJ = '" + jCNPJ.getText().replaceAll("[/,-,.]", "") + "'";
        System.out.println(sql);

        int r2 = BD.runSQL(sql);
        if (r2 == 1) {
            JOptionPane.showMessageDialog(null, "Alteração realizada com sucesso!");

        } else {
            JOptionPane.showMessageDialog(null, "Problemas na Alteração, verifique se "
                    + "você digitou os campos corretamente!");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup grupo_sexo;
    private javax.swing.JTextField jBairro;
    private javax.swing.JButton jButton3;
    private javax.swing.JFormattedTextField jCEP;
    private javax.swing.JFormattedTextField jCNPJ;
    private javax.swing.JFormattedTextField jCPF;
    private javax.swing.JFormattedTextField jCelular;
    private javax.swing.JTextField jCidade;
    private javax.swing.JFormattedTextField jDataNascimento;
    private javax.swing.JTextField jEmail;
    private javax.swing.JFormattedTextField jEstado;
    private javax.swing.JFormattedTextField jFone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jNome;
    private javax.swing.JFormattedTextField jNumero;
    private javax.swing.JTextArea jOBS;
    private javax.swing.JTextField jRua;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbCadastrar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbConsulta;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JRadioButton jbFeminino;
    private javax.swing.JButton jbLimpar;
    private javax.swing.JRadioButton jbMasculino;
    private javax.swing.JButton jbNovo;
    private javax.swing.JRadioButton jbrFisica;
    private javax.swing.JRadioButton jbrJuri;
    // End of variables declaration//GEN-END:variables

}
